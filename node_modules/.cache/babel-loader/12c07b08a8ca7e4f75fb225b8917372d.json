{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EMMANUEL\\\\Documents\\\\React-Frontend3\\\\Ejercicios\\\\FinalProject\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useEffect } from \"react\";\nimport { useReducer } from \"react\";\nimport reducer from \"../../Reducer/reducer\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext();\n\nconst ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [state, dispatch] = useReducer(reducer, initialState);\n  console.log(state);\n  const url = '';\n  useEffect(() => {\n    axios();\n  });\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {},\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = ContextProvider;\nexport default ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useReducer","reducer","axios","initialState","theme","data","ContextGlobal","ContextProvider","children","state","dispatch","console","log","url"],"sources":["C:/Users/EMMANUEL/Documents/React-Frontend3/Ejercicios/FinalProject/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext,useContext,useEffect } from \"react\";\r\nimport { useReducer } from \"react\";\r\nimport reducer from \"../../Reducer/reducer\"\r\nimport axios from \"axios\";\r\n\r\n\r\nexport const initialState = {\r\n  theme: \"\",\r\n   data: []\r\n  }\r\n\r\nexport const ContextGlobal = createContext();\r\n\r\n\r\n const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n\r\n  const [state, dispatch]= useReducer(reducer,initialState)\r\n  console.log(state)\r\n  \r\n  const url=''\r\n\r\n  useEffect(()=>{\r\n    axios()\r\n  })\r\n  \r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{}}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n\r\nexport default ContextProvider\r\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAuBC,UAAvB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,OAAO,MAAMC,YAAY,GAAG;EAC1BC,KAAK,EAAE,EADmB;EAEzBC,IAAI,EAAE;AAFmB,CAArB;AAKP,OAAO,MAAMC,aAAa,gBAAGT,aAAa,EAAnC;;AAGN,MAAMU,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EACzC;EAEA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAmBV,UAAU,CAACC,OAAD,EAASE,YAAT,CAAnC;EACAQ,OAAO,CAACC,GAAR,CAAYH,KAAZ;EAEA,MAAMI,GAAG,GAAC,EAAV;EAEAd,SAAS,CAAC,MAAI;IACZG,KAAK;EACN,CAFQ,CAAT;EAKA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE,EAA/B;IAAA,UACGM;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAlBA;;GAAMD,e;;KAAAA,e;AAoBP,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}